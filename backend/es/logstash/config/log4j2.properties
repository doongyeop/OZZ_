status = error
name = LogstashPropertiesConfig

appenders = console, rolling
loggers = jdbcinput

/* Console창에 info 하위 레벨 로그가 출력되도록 */
appender.console.type = Console
appender.console.name = plain_console
appender.console.layout.type = PatternLayout
appender.console.layout.pattern = [%d{ISO8601}][%-5p][%-25c]%notEmpty{[%X{pipeline.id}]}%notEmpty{[%X{plugin.id}]} %m%n
appender.console.filter.threshold.type = ThresholdFilter
appender.console.filter.threshold.level = info

rootLogger.level = info
rootLogger.appenderRef.console.ref = ${sys:ls.log.format}_console

/* Log 파일에는 warn 하위 레벨 로그만 출력되도록 */
appender.rolling.type = RollingFile
appender.rolling.name = rolling
# 해당 경로에 로그 파일 저장
appender.rolling.fileName = /usr/share/logstash/logs/logstash.log  
# 만약에 파일에 들어있는 로그 수가 많을 경우 "일"별로 로그 파일을 분리하여 기록
appender.rolling.filePattern = /usr/share/logstash/logs/logstash-%d{yyyyMMdd}.log 
appender.rolling.layout.type = PatternLayout
appender.rolling.layout.pattern = [%d{ISO8601}][%-5p][%-25c] %m%n
appender.rolling.policies.type = Policies
appender.rolling.policies.time.type = TimeBasedTriggeringPolicy
appender.rolling.policies.time.interval = 1
appender.rolling.policies.time.modulate = true
appender.rolling.strategy.type = DefaultRolloverStrategy
appender.rolling.strategy.max = 30
appender.rolling.filter.threshold.type = ThresholdFilter
appender.rolling.filter.threshold.level = warn

rootLogger.level = info
rootLogger.appenderRef.rolling.ref = rolling

/* 단, 5초마다 생성되는 jdbc 관련 로그는 Error Level일 경우에만 출력되도록 */
logger.jdbcinput.name = logstash.inputs.jdbc
logger.jdbcinput.level = ERROR